
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

int main(void)
{
    pid_t pid1, pid2;
    int rv;

    switch(pid1 = fork())
      {
    case -1:
        perror("fork");  /* something went wrong */
        exit(1);         /* parent exits */

    case 0:
        printf(" CHILD1: This is the child process!\n");
        printf(" CHILD1: My PID is %d\n", getpid());
        printf(" CHILD1: My parent's PID is %d\n", getppid());
        printf(" CHILD1: Enter my exit status (make it small): ");
        scanf(" %d", &rv);
        printf(" CHILD1: I'm outta here!\n");

    default:
        printf("PARENT: This is the parent process!\n");
        printf("PARENT: My PID is %d\n", getpid());
        printf("PARENT: My 1st child's PID is %d\n", pid1);
        printf("PARENT: I'm now waiting for my both child to exit()...\n");
        wait(&rv);
        printf("PARENT: My child's exit status is: %d\n", WEXITSTATUS(rv));
        printf("PARENT: I'm outta here!\n");

      }
 switch(pid2 = fork())
     {
    case -1:
        perror("fork");  /* something went wrong */
        exit(1);         /* parent exits */

    case 0:
        printf(" CHILD2: This is the child process!\n");
        printf(" CHILD2: My PID is %d\n", getpid());
        printf(" CHILD2: My parent's PID is %d\n", getppid());
        printf(" CHILD2: Enter my exit status (make it small): ");
        scanf(" %d", &rv);
        printf(" CHILD2: I'm outta here!\n");

    default:
        printf("PARENT: This is the parent process!\n");
        printf("PARENT: My PID is %d\n", getpid());
        printf("PARENT: My 2nd child's PID is %d\n", pid2);
        printf("PARENT: I'm now waiting for my both child to exit()...\n");
        wait(&rv);
        printf("PARENT: My child's exit status is: %d\n", WEXITSTATUS(rv));
        printf("PARENT: I'm outta here!\n");

     }
    return 0;
}

 

